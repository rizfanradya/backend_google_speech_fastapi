# version: "3.8"
services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: google_speech
      POSTGRES_DB: google_speech
      POSTGRES_PASSWORD: O8IfbjmMtQek06kBsy8WzveVxu0GLGMo5RExBZadbn5AUA0UQh
    ports:
      - "15432:5432"
    volumes:
      - db_data_pgsql:/var/lib/postgresql/data
      - ./data/init_scripts:/docker-entrypoint-initdb.d
    command: >
      postgres -c wal_level=logical -c max_replication_slots=4 -c max_wal_senders=4
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U google_speech" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    restart: always
    ports:
      - "16379:6379"
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    ports:
      - "12181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: ["CMD", "echo", "ruok", "|", "nc", "localhost", "2181"]
      interval: 10s
      timeout: 5s
      retries: 5


  kafka:
    image: wurstmeister/kafka:latest
    restart: always
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
    expose:
      - "19092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: INSIDE://0.0.0.0:19092,OUTSIDE://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:19092,OUTSIDE://localhost:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_CREATE_TOPICS: "google_speech_v1"
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions.sh", "--bootstrap-server", "kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 10

  connect:
    image: debezium/connect:3.0.0.Final
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
      postgres:
        condition: service_healthy
    ports:
      - "18083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:19092"
      GROUP_ID: "debezium_connect_group"
      CONFIG_STORAGE_TOPIC: "connect_configs"
      OFFSET_STORAGE_TOPIC: "connect_offsets"
      STATUS_STORAGE_TOPIC: "connect_status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.17.2
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "19200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "18000:8000"
    restart: always
    volumes:
      - backend_uploads:/app/data/uploads
      - backend_downloads:/app/data/downloads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy

volumes:
  db_data_pgsql:
  backend_uploads:
  backend_downloads:
  redis_data:
  elasticsearch_data: