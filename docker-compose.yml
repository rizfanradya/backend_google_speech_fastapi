# version: "3.8"
services:
  postgres:
    image: postgres:latest
    restart: always
    environment:
      POSTGRES_USER: google_speech
      POSTGRES_DB: google_speech
      POSTGRES_PASSWORD: O8IfbjmMtQek06kBsy8WzveVxu0GLGMo5RExBZadbn5AUA0UQh
    ports:
      - "15432:5432"
    volumes:
      - db_data_pgsql:/var/lib/postgresql/data
      - ./data/init_scripts:/docker-entrypoint-initdb.d
    command: >
      postgres -c wal_level=logical -c max_replication_slots=4 -c max_wal_senders=4
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U google_speech" ]
      interval: 10s
      timeout: 5s
      retries: 5

  redis:
    image: redis:latest
    restart: always
    ports:
      - "16379:6379"
    command: redis-server --appendonly yes --save 60 1 --loglevel warning
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: 21811

  kafka:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "19092:9092"
    environment:
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_NUM_PARTITIONS: 3

  connect:
    image: debezium/connect:2.5
    restart: always
    depends_on:
      - kafka
      - postgres
    ports:
      - "18083:8083"
    environment:
      BOOTSTRAP_SERVERS: "kafka:9092"
      GROUP_ID: "debezium_connect_group"
      CONFIG_STORAGE_TOPIC: "connect_configs"
      OFFSET_STORAGE_TOPIC: "connect_offsets"
      STATUS_STORAGE_TOPIC: "connect_status"
      KEY_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
      VALUE_CONVERTER: "org.apache.kafka.connect.json.JsonConverter"
    command: ["/bin/sh", "-c", "sleep 15 && /setup-connectors.sh"]

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.5.0
    restart: always
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
    ports:
      - "19200:9200"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data

  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "18000:8000"
    restart: always
    volumes:
      - backend_uploads:/app/data/uploads
      - backend_downloads:/app/data/downloads
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy

volumes:
  db_data_pgsql:
  backend_uploads:
  backend_downloads:
  redis_data:
  elasticsearch_data: